---
layout: post
title: "Chapter.9 控制抽象"
date: 2015-05-31 16:54:59 +0800
comments: true
categories: scala 读书笔记
---

###高阶函数
高阶函数可以大幅度的减少代码重复，其实所有的函数都可以分割成两部分：

1. 通用部分：他们在每次函数调用中都相同，一般指函数体。
2. 非通用部分：在不同的函数调用中可能会变化。一般指函数参数。

> 当把函数值用作参数时，算法的非通用部分就是它(函数值)代表的某些其他算法。在这种函数的每一次调用中，都可以把不同的函数值作为参数传入，于是被调用函数将在每次选用参数的时候调用传入的函数值。这就是所谓的**高阶函数：higher-order function**。

###Curry化
用于制造“感觉像是原生语言支持“的控制抽象。如下例，curry化函数的调用在本质上是连续调用了两个传统函数。地一个函数调用带单个名为x的Int参数，并返回第二个函数的函数值。第二个函数带Int参数y。**也就是说curry化会依次应用多个传统函数到每个参数上。其中每一次应用都返回一个偏应用函数的函数值。**


```scala
scala> def curriedSum(x: Int)(y: Int) = x + y
curriedSum: (Int)(Int)Int
scala> curriedSum(1)(2)
res1: Int = 3
```



